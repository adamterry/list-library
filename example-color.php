<?php
// Example use of the Colors class to create clor code tables

// I will be directly including the class for the examples below,
// but you could also use an autoloader and namespacing to pull in the class file
include 'classes/Colors.php';

// Instantiate a new Colors object
$colors = new Colors;

// Now that we have created a Colors object ($color)
// we can now access any of its methods.
//
// The methods available within the Colors class are as follows.
//
// hexWhite()
// hexGray()
// hexRed()
// hexPink()
// hexOrange()
// hexYellow()
// hexPurple()
// hexGreen()
// hexBlue()
// hexBrown()
// hexAll()
//
// The data is returned in an assiciative array with a $key => $value pair or [key: Color Name] => [value: Hexadecimal Code]
?>
<!DOCTYPE html>
<html>
<head>
	<title>Color Example</title>
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	
	<!-- Bootstrap core CSS -->
	<link href="http://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.4/css/bootstrap.min.css" rel="stylesheet" media="screen">
	
	<!-- HTML5 shim and Respond.js IE8 support of HTML5 elements and media queries -->
	<!--[if lt IE 9]>
	<script src="http://cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.2/html5shiv.js"></script>
	<script src="http://cdnjs.cloudflare.com/ajax/libs/respond.js/1.4.2/respond.js"></script>
	<![endif]-->
</head>
<body>
<div class="container-fluid">
    <div class="row">
        <div class="col-sm-12">
            <h1>Example: Creating Color Code Tables</h1>
            <hr>
            <div class="well">
                <p><i class="glyphicon glyphicon-info-sign"></i> The below example shows color lists being generated by a foreach loop.<br>
                With each loop we access the current colors Key (Color name) and Value (Hex code).<br>
                We then use these values to manipulate each list item's background and display its name and code.</p>
                <code>Code Sample : 
                foreach($color as $key => $value){ 
                    echo $key.' - '.$value; 
                }
                </code>
            </div>
        </div>
    </div>
    <!-- FIRST ROW OF COLOR LISTS -->
    <div class="row">    
        <!-- WHITE LIST -->
        <div class="col-sm-12 col-md-4">
            <h3>WHITE</h3>
            <ul class="list-group">
                <?php
                // Here is an example of how to access one of the above methods.
                // Firstly, lets assign the method to a variable (container to hold the returned array/list)
                $whiteColors = $color->hexWhite();
                // Now, to display the list on screen, we can use a foreach loop.
                // * Disclaimer: 
                // The use of inline styles in this example are definitely not best practice.
                // Its use here is only intended to keep the example file structure to a minimum.
                // In real world applications it would be best practice to use a stylesheet and css classes to add styling to elements.
                foreach($whiteColors as $name => $hex){
                    echo '<li class="list-group-item" style="background: '.$hex.'">'.$name.' - '.$hex.'</li>';
                }
                ?>
            </ul>
        </div>
        <!-- GRAY LIST -->
        <div class="col-sm-12 col-md-4">
            <h3>GRAY</h3>
            <ul class="list-group">
                <?php
                // Here is an example of how to access one of the above methods.
                // Firstly, lets assign the method to a variable (container to hold the returned array/list)
                $grayColors = $color->hexGray();
                // Now, to display the list on screen, we can use a foreach loop.
                // * Disclaimer: 
                // The use of inline styles in this example are definitely not best practice.
                // Its use here is only intended to keep the example file structure to a minimum.
                // In real world applications it would be best practice to use a stylesheet and css classes to add styling to elements.
                foreach($grayColors as $name => $hex){
                    echo '<li class="list-group-item" style="background: '.$hex.'">'.$name.' - '.$hex.'</li>';
                }
                ?>
            </ul>
        </div> 
        <!-- YELLOW LIST -->
        <div class="col-sm-12 col-md-4">
            <h3>YELLOW</h3>
            <ul class="list-group">
                <?php
                // Here is an example of how to access one of the above methods.
                // Firstly, lets assign the method to a variable (container to hold the returned array/list)
                $yellowColors = $color->hexYellow();
                // Now, to display the list on screen, we can use a foreach loop.
                // * Disclaimer: 
                // The use of inline styles in this example are definitely not best practice.
                // Its use here is only intended to keep the example file structure to a minimum.
                // In real world applications it would be best practice to use a stylesheet and css classes to add styling to elements.
                foreach($yellowColors as $name => $hex){
                    echo '<li class="list-group-item" style="background: '.$hex.'">'.$name.' - '.$hex.'</li>';
                }
                ?>
            </ul>
        </div> 
    </div> <!-- /FIRST ROW -->
    <!-- SECOND ROW OF COLOR LISTS -->
    <div class="row">
        <!-- PINK LIST -->
        <div class="col-sm-12 col-md-4">
            <h3>PINK</h3>
            <ul class="list-group">
                <?php
                // Here is an example of how to access one of the above methods.
                // Firstly, lets assign the method to a variable (container to hold the returned array/list)
                $pinkColors = $color->hexPink();
                // Now, to display the list on screen, we can use a foreach loop.
                // * Disclaimer: 
                // The use of inline styles in this example are definitely not best practice.
                // Its use here is only intended to keep the example file structure to a minimum.
                // In real world applications it would be best practice to use a stylesheet and css classes to add styling to elements.
                foreach($pinkColors as $name => $hex){
                    echo '<li class="list-group-item" style="background: '.$hex.'">'.$name.' - '.$hex.'</li>';
                }
                ?>
            </ul>
        </div>
        <!-- ORANGE LIST -->
        <div class="col-sm-12 col-md-4">
            <h3>ORANGE</h3>
            <ul class="list-group">
                <?php
                // Here is an example of how to access one of the above methods.
                // Firstly, lets assign the method to a variable (container to hold the returned array/list)
                $orangeColors = $color->hexOrange();
                // Now, to display the list on screen, we can use a foreach loop.
                // * Disclaimer: 
                // The use of inline styles in this example are definitely not best practice.
                // Its use here is only intended to keep the example file structure to a minimum.
                // In real world applications it would be best practice to use a stylesheet and css classes to add styling to elements.
                foreach($orangeColors as $name => $hex){
                    echo '<li class="list-group-item" style="background: '.$hex.'">'.$name.' - '.$hex.'</li>';
                }
                ?>
            </ul>
        </div>
        <!-- RED LIST -->
        <div class="col-sm-12 col-md-4">
            <h3>RED</h3>
            <ul class="list-group">
                <?php
                // Here is an example of how to access one of the above methods.
                // Firstly, lets assign the method to a variable (container to hold the returned array/list)
                $redColors = $color->hexRed();
                // Now, to display the list on screen, we can use a foreach loop.
                // * Disclaimer: 
                // The use of inline styles in this example are definitely not best practice.
                // Its use here is only intended to keep the example file structure to a minimum.
                // In real world applications it would be best practice to use a stylesheet and css classes to add styling to elements.
                foreach($redColors as $name => $hex){
                    echo '<li class="list-group-item" style="background: '.$hex.'">'.$name.' - '.$hex.'</li>';
                }
                ?>
            </ul>
        </div>
    </div> <!-- /SECOND ROW -->
    <!-- THIRD ROW OF COLOR LISTS -->
    <div class="row">
        <!-- PURPLE LIST -->
        <div class="col-sm-12 col-md-4">
            <h3>PURPLE</h3>
            <ul class="list-group">
                <?php
                // Here is an example of how to access one of the above methods.
                // Firstly, lets assign the method to a variable (container to hold the returned array/list)
                $purpleColors = $color->hexPurple();
                // Now, to display the list on screen, we can use a foreach loop.
                // * Disclaimer: 
                // The use of inline styles in this example are definitely not best practice.
                // Its use here is only intended to keep the example file structure to a minimum.
                // In real world applications it would be best practice to use a stylesheet and css classes to add styling to elements.
                foreach($purpleColors as $name => $hex){
                    echo '<li class="list-group-item" style="background: '.$hex.'">'.$name.' - '.$hex.'</li>';
                }
                ?>
            </ul>
        </div>
        <!-- GREEN LIST -->
        <div class="col-sm-12 col-md-4">
            <h3>GREEN</h3>
            <ul class="list-group">
                <?php
                // Here is an example of how to access one of the above methods.
                // Firstly, lets assign the method to a variable (container to hold the returned array/list)
                $greenColors = $color->hexGreen();
                // Now, to display the list on screen, we can use a foreach loop.
                foreach($greenColors as $name => $hex){
                    echo '<li class="list-group-item" style="background: '.$hex.'">'.$name.' - '.$hex.'</li>';
                }
                ?>
            </ul>
        </div>
        <!-- BLUE LIST -->
        <div class="col-sm-12 col-md-4">
            <h3>BLUE</h3>
            <ul class="list-group">
                <?php
                // Here is an example of how to access one of the above methods.
                // Firstly, lets assign the method to a variable (container to hold the returned array/list)
                $blueColors = $color->hexBlue();
                // Now, to display the list on screen, we can use a foreach loop.
                // * Disclaimer: 
                // The use of inline styles in this example are definitely not best practice.
                // Its use here is only intended to keep the example file structure to a minimum.
                // In real world applications it would be best practice to use a stylesheet and css classes to add styling to elements.
                foreach($blueColors as $name => $hex){
                    echo '<li class="list-group-item" style="background: '.$hex.'">'.$name.' - '.$hex.'</li>';
                }
                ?>
            </ul>
        </div>
    </div> <!-- /THIRD ROW -->
    <!-- FOURTH ROW OF COLOR LISTS -->
    <div class="row">  
        <!-- BROWN LIST -->
        <div class="col-sm-12 col-md-4">
            <h3>BROWN</h3>
            <ul class="list-group">
                <?php
                // Here is an example of how to access one of the above methods.
                // Firstly, lets assign the method to a variable (container to hold the returned array/list)
                $brownColors = $color->hexBrown();
                // Now, to display the list on screen, we can use a foreach loop.
                // * Disclaimer: 
                // The use of inline styles in this example are definitely not best practice.
                // Its use here is only intended to keep the example file structure to a minimum.
                // In real world applications it would be best practice to use a stylesheet and css classes to add styling to elements.
                foreach($brownColors as $name => $hex){
                    echo '<li class="list-group-item" style="background: '.$hex.'">'.$name.' - '.$hex.'</li>';
                }
                ?>
            </ul>
        </div>    
    </div> <!-- /FOURTH ROW -->
</div>	
	<!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
	<script src="http://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
	<!-- Include all compiled plugins (below), or include individual files as needed -->
	<script src="http://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.4/js/bootstrap.min.js"></script>
</body>
</html>